<h3>Cadastro de pessoa</h3>

@page "/pessoa"
@using Newtonsoft.Json
@using System.Runtime.Serialization.Json
@using System.Text


@if (listPessoa == null || listPessoa?.Count() == 0)
{
    <p><em>Sem registro</em></p>
}
else if (listPessoa == null)
{
    <p><em>Aguarde...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>CPF</th>
                <th>Nascimento</th>
                <th>Telefone</th>
                <th>Email</th>
                <th>Edição</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itemPessoa in listPessoa.ToList().OrderByDescending(x=>x.id))
            {
                <tr>
                    <td>@itemPessoa.id</td>
                    <td>@itemPessoa.str_nome</td>
                    <td>@itemPessoa.str_cpf</td>
                    <td>@itemPessoa.dat_nascimento</td>
                    <td>@itemPessoa.lon_telefone</td>
                    <td>@itemPessoa.str_email</td>
                    <td>
                        <button @onclick="() => Edit(itemPessoa)">Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<EditForm Model=@pessoaInsert OnValidSubmit=@FormSubmitted>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <strong>Nome completo</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@pessoaInsert.str_nome" />
    </div>

    <div class="mb-3">
        <strong>CPF</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@pessoaInsert.str_cpf" />
    </div>

    <div class="mb-3">
        <strong>E-mail</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@pessoaInsert.str_email" />
    </div>

    <div class="mb-3">
        <strong>Endereço</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@enderecoInsert.str_endereco" />
    </div>

    <div class="mb-3">
        <strong>Número</strong>:
    </div>
    <div class="mb-3">
        <InputNumber @bind-Value="@enderecoInsert.int_numero" />
    </div>

    <div class="mb-3">
        <strong>Cidade</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@enderecoInsert.str_cidade" />
    </div>


    @*  <div class="mb-3">
    <strong>Data de nascimento</strong>:
    </div>
    <div class="mb-3">
    <DateInput TValue="DateOnly?" @bind-Value="pessoaInsert.dat_nascimento" />
    </div> *@

    <div class="mb-3">
        <strong>Usuário</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@usuario" />
    </div>

    <div class="mb-3">
        <strong>Senha</strong>:
    </div>
    <div class="mb-3">
        <InputText @bind-Value="@senha" />
    </div>
    <button type="submit">Cadastrar</button>

</EditForm>
@code {
    bool edit = false;
    string usuario;
    string senha;
    private Netrin.teste.Data.cadastro.pessoa[]? listPessoa;
    Netrin.teste.Data.cadastro.pessoa? pessoaInsert;
    Netrin.teste.Data.cadastro.endereco? enderecoInsert;
    HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        edit = false;
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7163/pessoa/");
        var content = new StringContent("", null, "text/plain");
        request.Content = content;
        var response = client.Send(request);
        response.EnsureSuccessStatusCode();
        listPessoa = JsonConvert.DeserializeObject<Netrin.teste.Data.cadastro.pessoa[]?>(response.Content.ReadAsStringAsync().Result)?.ToList().OrderByDescending(x=>x.id).ToArray() ?? null;

        pessoaInsert = new Netrin.teste.Data.cadastro.pessoa();
        enderecoInsert = new Netrin.teste.Data.cadastro.endereco();
    }

    private async Task Edit(Netrin.teste.Data.cadastro.pessoa? pessoa)
    {
        pessoaInsert = pessoa;
        edit = true;

        // string json = ConverteObjectParaJSon(pessoa);
        // var client = new HttpClient();
        // var request = new HttpRequestMessage(HttpMethod.Put, "https://localhost:7163/pessoa/");
        // var content = new StringContent(json, null, "text/plain");
        // request.Content = content;
        // var response = await client.SendAsync(request);
        // response.EnsureSuccessStatusCode();
    }

    void FormSubmitted()
    {

        if (pessoaInsert?.id != null )
        {
            string json = ConverteObjectParaJSon(pessoaInsert);
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7163/pessoa/");

            if(edit)
                request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7163/pessoa/{pessoaInsert.id}");

            var content = new StringContent(json, null, "application/json");
            request.Content = content;
            var response = client.Send(request);

        }
        else
        {
            client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7163/pessoa/{pessoaInsert.id}");
            var content = new StringContent("", null, "application/json");
            request.Content = content;
            var response = client.Send(request);
            response.EnsureSuccessStatusCode();
        }

        OnInitializedAsync();

    }


      public string ConverteObjectParaJSon<T>(T obj)
        {
            try
            {
                DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(T));
                MemoryStream ms = new MemoryStream();
                ser.WriteObject(ms, obj);
                string jsonString = Encoding.UTF8.GetString(ms.ToArray());
                ms.Close();
                return jsonString;
            }
            catch
            {
                throw;
            }
        }


}
